import components.creative_points 1.0

Scene {
  id: film

  property var ai: { return {} }

  function initai() {
    var c=1;
    for (var i=0; i<9; i++)
    for (var j=0; j<9; j++,c++) {
      if (!ai[c]) ai[c] = {};
      ai[c].pos = [j+1,i+1];
      ai[c].color = [1,1,1];
      ai[c].angle = 270;
    }
  }

  Item {
    Component.onCompleted: film.initai();
  }

  ////////////////////////////////
  RenderKadets3 {
    curstage: film.curstage
    id: sp
    onClicked: { kadet.value = index+1; console.log( (index+1) +"," ); }
  }

  /*
  Param {
    text: "Шаги"
    values: {
      r = [];
      for (var i=0; i<stages.length; i++) {
        r.push( " === " + stages[i].title );
        for (var j=1; j<=stages[i].timelen; j++)
          r.push( "  шаг "+j );
      }
      return r;  
    }
    id: tshag
    onValueChanged: tparam.value = 	value
  }
  */

  Param {
    text: "Время"
    min: 0
    max: {
      r=0;
      for (var i=0; i<stages.length; i++) 
        r += stages[i].timelen;
      return r;
      }
    id: tparam
    step: 0.05
    enableSliding: true
    property var animationPriority: 1
    property var animationStep: 0.1
  }

/*
  Param {
    text: "Кадет"
    values: Object.keys( curstage.start_ai )
    id: kadet
  }

  Text {
    property var tag: "left"
    //text: curstage.findkadetgroups( kadet.value ).join(",")
    text: kadet.value
  }
*/

  /*
  Spheres {
    positions: sp.positions ? sp.positions.slice( kadet.val*3,kadet.val*3+3 ) : []
    colors: [1,1,0]
    radius: 2
    opacity: 0.5
  }
  */

  ///////////////////////////////////

  Item {
    id: stagesplace

    Repeater {
      model: thestages.length
      id: rep
      Stage {
        property var prevstage: rep.$items[ index-1 ]
        start: prevstage ? prevstage.start + prevstage.timelen : 0
        time: tparam.value-start

        start_ai: prevstage ? prevstage.final_ai: film.ai

        title: thestages[index].title
        groups: thestages[index].groups
        program: thestages[index].program
      }
    }
  }

  
  property var stages: {
    return stagesplace.children.slice( 0, -1 );
  }

  property var curstage: {
    for (var i=0; i<stages.length; i++) 
      if (stages[i].start <= tparam.value && stages[i].start + stages[i].timelen >= tparam.value) return stages[i];
    
    return stages[ stages.length-1 ] || stage;
  }

  Stage {
    id: stage
    start_ai: film.ai
  }

  TextSprite {
    //centered: true
    texOffset: [-0.25, 0.25]
    center: [25,20,-25]
    text: curstage.title + " Шаг " + Math.floor( (tparam.value - curstage.start) )
    radius: 30
  }

  text: ""

  cameraPos:[50.67077112168084,37.81110168278806,46.2200407844477]
  cameraCenter:[29.726218681811417,2.828851260832141,-14.823589669235645]
  axes.visible: true

  //// parse
  Text {
    property var tag: "left"
    text: " "
  }

  DataParam {
    visible: false
    text: "Программа дефиле"
    guid: "proga"
    file: Qt.resolvedUrl( "k1.txt")
    id: dparam
    TextLoader {
      id: txt
      file: parent.file
    }
  }

/*
          Button {
            property var tag: "left"
            text: "Редактор"
            property var urr: Qt.resolvedUrl("test-ace/1.html");
            property var editorWindow
            onClicked: {
                    editorWindow = window.open( "about:blank","_blank", "width=700, height=700, top=100,left=100" );
                    editorWindow.opener = window;
                    editorWindow.document.location = urr;
                    //editorWindow = window.open( urr );

                    setTimeout( function() {
                      editorWindow.postMessage( {"cmd":"init","code":txt.output},"*" );
                    }, 500 );
            }
          }
*/

  Item {
    Component.onCompleted: {
      window.addEventListener("message", receiveMessage22, false);
    }

    // ловим сообщения..
    function receiveMessage22(event) {
        
        var cmd = event.data.cmd;
        var args = event.data.args;
        console.log("!!!!",cmd);
        if (cmd == "useprg") {
          console.log("qqq");
          dparam.files = [{ content: args[0] }];
          //setFileProgress( "программа","получена",-1 );
          setGuiProgress(100,"программа получена");
          setTimeout( function() { setGuiProgress(-1); }, 300 );
        }
    }
  }


  property var thestages: parse( txt.output )

  function parse( txt ) {
    var lines = txt.split("\n");
    var accstage = {};
    var res = [];

    for (var i=0; i<lines.length; i++ ) {
      var line = lines[i];
      console.log(line);
      var m = line.match(/#/);
      if (m) continue;

      m = line.match(/={3,} (.+)/);
      if (m) {
        if (Object.keys(accstage).length > 0) res.push( accstage );
        accstage = { title: m[1], program: [], groups: accstage.groups || {} };
        continue;
      }

      m = line.match(/(.+) = (.+)/);
      if (m) {
        accstage.groups[ m[1] ] = m[2].split(/[ ,]+/).map( function(v) { return v; } );
        continue;
      }

      m = line.match(/(.+) (с шага (\d+) (.+))/);

      if (m) {
        var target = m[1];
        var cmd = m[4];
        var start = parseFloat( m[3] );

        var m2 = cmd.match(/движение ((\d|\.)+)/);
        if (m2) {
          var time = parseFloat(m2[1]);
          var rec = { type: "shag", start: start, value: time, target: target, time: time };
          accstage.program.push( rec );
        }

        m2 = cmd.match(/поворот (\S+)( (\S+))?/);
        if (m2) {
          var rec = { type: "povorot", start: start, target: target, value: 0, time: 1 };
          if (m2[1] == "налево") rec.value = 90;
          else if (m2[1] == "направо") rec.value = -90;
          else if (m2[1] == "кругом") rec.value = 180;
          else if (m2[1] == "на" && m2[3] == "зрителя") rec.value = 1001;
          else rec.value = parseFloat( m2[1] );
          accstage.program.push( rec );
        }

        m2 = cmd.match(/выровняться/);
        if (m2) {
          var rec = { type: "rovno", start: start, target: target, value: 0, time: 1 };
          accstage.program.push( rec );
        }

        m2 = cmd.match(/время ((\d|\.)+)/);
        if (m2) {
          var last = accstage.program[ accstage.program.length-1 ];
          if (last) last.time = parseFloat( m2[1] );
        }

        continue;
      }

      m = line.match(/пауза (\d+)?/);
      if (m) {
        var last = accstage.program[ accstage.program.length-1 ];
        var st = last ? last.start + last.time : 0
        var rec = { type: "pause", target: "", value: 0, time: parseFloat( m[1] || "10" ), start: st };
        accstage.program.push( rec );
      }

      m = line.match(/(.+) цвет (.+)/);
      if (m) {
        var rec = { type: "color", target: m[1], value: m[2], time: 0, start: 0 };
        accstage.program.push( rec );
      }

    }
    /*
    if (res.length == 0) {
      accstage = { title: m[1], program: [], groups: accstage.groups || {} };
    }*/

    if (Object.keys(accstage).length > 0) res.push( accstage );

    console.log( "Stages parse res=",res);

    return res;
  }

  Setka {
    nx: 9
    ny: 9
  }

  Text {
    text: "Музыка"
    property var tag: "left"
  }

  Audio {
    src: Qt.resolvedUrl("kadet-marsh-minus.mp3")
    property var tag: "left"
    width: 200
    id: marsh
  }

  Text {
    text: " "
    property var tag: "left"
  }

  Button {
    width: 200
    text: film.driverControls.movieDialog.processActive ? "СТОП" : "МАРШ С МУЗЫКОЙ"
    property var tag: "left"
    onClicked: {
      if (film.driverControls.movieDialog.processActive) {
        film.driverControls.movieDialog.stop();
        marsh.htmlTag.pause();
      }
      else {
        marsh.htmlTag.pause();
        marsh.htmlTag.currentTime = 19.7;
        marsh.htmlTag.play();

        film.driverControls.movieDialog.prepare();
        film.driverControls.movieDialog.gogo();
      }
    }
  }
}